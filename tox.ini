[tox]
project = Github Rate Limits Prometheus Exporter
skipsdist = true
envlist =
  pre-testenv,
  isort,
  black,
  pylint,
  bandit,
  mypy,
  tests,
  dc
requires =
  tox>3
  virtualenv>20


[base]
passenv =
    GITHUB_ACCOUNT
    GITHUB_AUTH_TYPE
    GITHUB_TOKEN
    GITHUB_APP_ID
    GITHUB_APP_INSTALLATION_ID
    GITHUB_APP_PRIVATE_KEY_PATH
    GITHUB_APP_SRC_PRIVATE_KEY_PATH
    GITHUB_LOG_LEVEL


[dc-base]
passenv =
    {[base]passenv}
    GF_SECURITY_ADMIN_USER
    GF_SECURITY_ADMIN_PASSWORD


[testenv]
changedir = {toxinidir}
basepython = python3
setenv =
    VIRTUAL_ENV = {envdir}
    PYTHONDONTWRITEBYTECODE = 1
    PYTHONUNBUFFERED = 1
    PYTHONWARNINGS = ignore
    VIRTUALENV_NO_DOWNLOAD = 1
sitepackages = false
deps =
    -r {toxinidir}/requirements.txt
allowlist_externals =
    bash
commands =
    - bash -c 'find {toxinidir} -type d -name "__pycache__" | xargs rm -rf'
    - bash -c 'find {toxinidir} -type d -name ".mypy_cache" | xargs rm -rf'
    - bash -c 'find {toxinidir} -type d -name ".allure" | xargs rm -rf'
    - bash -c 'find {toxinidir} -maxdepth 1 -type d -name "build" | xargs rm -rf'
    - bash -c 'find {toxinidir} -maxdepth 1 -type d -name "dist" | xargs rm -rf'
    - bash -c 'find {toxinidir} -type d -name "compile" | xargs rm -rf'
    - bash -c 'find {toxinidir} -type d -name "*.egg-info" | xargs rm -rf'
    - bash -c 'find {toxinidir} -type d -iname "cov_html" | xargs rm -rf'
    - bash -c 'find {toxinidir} -type f -iname "coverage.xml" | xargs rm -rf'
    - bash -c 'find {toxinidir} -type d -iname "profile_default" | xargs rm -rf'
    {envpython} -m pip check


[testenv:pylint]
description = Pylint python linter
depends = pre-testenv
deps =
    {[testenv]deps}
    -r {toxinidir}/requirements.d/pylint.txt
commands =
    {envpython} -m pylint github_rate_limits_exporter setup.py


[testenv:bandit]
description = Bandit security static analyzer
depends = pre-testenv
deps =
    {[testenv]deps}
    -r {toxinidir}/requirements.d/bandit.txt
commands =
    {envpython} -m bandit {posargs:-r -l --ini {toxinidir}/.bandit} github_rate_limits_exporter


[testenv:ipython]
description = IPython interactive interpreter
setenv =
    {[testenv]setenv}
    IPYTHONDIR = {toxinidir}
deps =
    {[testenv]deps}
    -r {toxinidir}/requirements.d/ipython.txt
commands =
    bash -c 'mkdir -p {env:IPYTHONDIR}/profile_default'
    bash -c 'cp -f {env:IPYTHONDIR}/.ipython_config \
      {env:IPYTHONDIR}/profile_default/ipython_config.py'
    ipython {posargs}


[testenv:mypy]
description = Mypy type checking
depends = pre-testenv
setenv =
    {[testenv]setenv}
    {tty:MYPY_FORCE_COLOR = 1}
deps =
    {[testenv]deps}
    -r {toxinidir}/requirements.d/mypy.txt
commands =
    {envpython} -m mypy {posargs} github_rate_limits_exporter


[testenv:dc]
description = Docker-compose command line
depend = pre-testenv
passenv = {[dc-base]passenv}
deps =
    -r {toxinidir}/requirements.d/dc.txt
commands =
    docker-compose {posargs:config}


[testenv:dc-run]
description = Docker-compose setup and run all services
passenv = {[dc-base]passenv}
deps =
    -r {toxinidir}/requirements.d/dc.txt
commands =
    docker-compose up --always-recreate-deps --build --remove-orphans {posargs}


[testenv:dc-clean]
description = Docker-compose cleanup/teardown all services
passenv = {[dc-base]passenv}
deps =
    -r {toxinidir}/requirements.d/dc.txt
commands =
    docker-compose down --rmi local --remove-orphans --volumes {posargs}


[testenv:tests]
description = Exporter unit/integration tests
depends = pre-testenv
setenv =
    {[testenv]setenv}
    {tty:PY_COLORS = 1}
deps =
    {[testenv]deps}
    -r {toxinidir}/requirements.d/tests.txt
commands =
    {envpython} -m pytest \
        --cov-fail-under=87 \
        --cov-report term-missing \
        --cov-report=html:cov_html \
        --cov-report=xml:coverage.xml \
        --cov=github_rate_limits_exporter {posargs}


[testenv:allure-tests]
description = Exporter unit/integration allure test reporting
allowlist_externals =
    allure
deps =
    {[testenv]deps}
    -r {toxinidir}/requirements.d/allure-tests.txt
commands =
    - {envpython} -m pytest \
      --tb=no \
      --alluredir={toxinidir}/.allure
    allure serve {toxinidir}/.allure --port {posargs:8200}


[testenv:run-exporter]
description = Start prometheus exporter as service
passenv = {[base]passenv}
commands =
    {envpython} -m github_rate_limits_exporter {posargs}


[testenv:isort]
description = Isort sort imports alphabetically
depends = pre-testenv
deps =
    -r {toxinidir}/requirements.d/isort.txt
commands =
    {envpython} -m isort \
      {posargs:--profile=black --diff --check-only} \
      github_rate_limits_exporter


[testenv:black]
description = Black python formatter
deps =
    -r {toxinidir}/requirements.d/black.txt
commands =
    {envpython} -m black \
      github_rate_limits_exporter \
        setup.py {posargs:--diff --check}


[testenv:vscode]
description = Virtualenv for VScode development purposes
deps =
    -r {toxinidir}/requirements.txt
    -r {toxinidir}/requirements.d/black.txt
    -r {toxinidir}/requirements.d/pylint.txt
    -r {toxinidir}/requirements.d/isort.txt
commands =
    {envpython} -c 'print("Add .tox/vscode/bin/python3 as default interpreter")'


[testenv:build_dist]
description = Packaging and distribution to PyPi
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
deps =
    -r {toxinidir}/requirements.d/bdist.txt
commands =
    {[testenv]commands}
    {envpython} -m build \
       --no-isolation --wheel {toxinidir}
    {envpython} -m twine upload \
       --skip-existing \
       --config-file {toxinidir}/.pypirc {posargs} dist/*


[testenv:install_dist]
description = Install the distribution
deps =
passenv =
    PIP_INDEX_URL
    PIP_EXTRA_INDEX_URL
commands =
    {envpython} -m pip install github_rate_limits_exporter{posargs:==0.1.0}
